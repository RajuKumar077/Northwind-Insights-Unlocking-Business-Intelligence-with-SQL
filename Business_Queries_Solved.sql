-- Who are the top 10 customers based on total purchases?
SELECT 
  C.CONTACTNAME, 
  SUM(O.UNITPRICE * O.QUANTITY) as total_purchases 
from 
  NORTHWINDCORE.CUSTOMER C 
  join NORTHWINDCORE.SALESORDER S on C.ENTITYID = S.CUSTOMERID 
  join NORTHWINDCORE.ORDERDETAIL O on S.ENTITYID = O.ORDERID 
GROUP BY 
  C.ENTITYID 
ORDER BY 
  total_purchases DESC 
limit 
  10;
-- What is the total number of customers in each country?
SELECT 
  COUNTRY, 
  Count(*) as Total_customers 
from 
  NORTHWINDCORE.CUSTOMER C 
group by 
  COUNTRY 
ORDER BY 
  Total_customers;
-- What is the most common customer type (Customer Type ID)?
SELECT 
  CUSTOMERID, 
  COUNT(*) as customer_count 
from 
  NORTHWINDCORE.SALESORDER S 
group by 
  CUSTOMERID 
order by 
  customer_count desc;
-- Which customers have the highest discount applied to their orders?
SELECT 
  C.CONTACTNAME, 
  Max(O.DISCOUNT) as highest_discount 
from 
  NORTHWINDCORE.ORDERDETAIL O 
  join NORTHWINDCORE.CUSTOMER C on C.ENTITYID = O.ENTITYID 
group by 
  C.CONTACTNAME 
ORDER by 
  highest_discount desc;
with DiscountRank as (
  select 
    C.CONTACTNAME, 
    O.DISCOUNT, 
    DENSE_RANK () over(
      order by 
        O.DISCOUNT desc
    ) as ranke 
  from 
    NORTHWINDCORE.ORDERDETAIL O 
    join NORTHWINDCORE.CUSTOMER C on O.ENTITYID = C.ENTITYID
) 
select 
  * 
from 
  DiscountRank 
order by 
  DISCOUNT desc;
-- Which products have the highest sales?
SELECT 
  P.PRODUCTNAME, 
  SUM(O.QUANTITY * P.UNITPRICE) AS TOTAL_SALES 
FROM 
  NORTHWINDCORE.PRODUCT P 
  JOIN NORTHWINDCORE.ORDERDETAIL O ON P.ENTITYID = O.PRODUCTID 
GROUP BY 
  P.PRODUCTNAME 
ORDER BY 
  TOTAL_SALES desc 
limit 
  10;
-- What is the total revenue generated by each product category?
select 
  C.CATEGORYNAME, 
  SUM(
    O.UNITPRICE * O.QUANTITY * (1 - O.discount)
  ) as total_revenue 
from 
  NORTHWINDCORE.CATEGORY C 
  join NORTHWINDCORE.PRODUCT P on P.CATEGORYID = C.ENTITYID 
  join NORTHWINDCORE.ORDERDETAIL O on O.PRODUCTID = p.ENTITYID 
group by 
  c.CATEGORYNAME 
order by 
  total_revenue desc;
-- Which product has the lowest stock available?
select 
  PRODUCTNAME, 
  UNITSINSTOCK 
from 
  NORTHWINDCORE.PRODUCT P 
order by 
  UNITSINSTOCK;
-- Which supplier provides the most products?
select 
  companyName, 
  COUNT(*) as ProductSupply 
from 
  NORTHWINDCORE.SUPPLIER S 
  join NORTHWINDCORE.PRODUCT P on P.SUPPLIERID = S.ENTITYID 
GROUP by 
  S.companyName 
order by 
  ProductSupply desc 
limit 
  1;
-- What is the reorder level for each product, and which ones need restocking?
UPDATE 
  NORTHWINDCORE.PRODUCT 
SET 
  reorderLevel = FLOOR(
    RAND() * 41
  ) 
WHERE 
  reorderLevel = 11;
SELECT 
  productName, 
  UNITSINSTOCK, 
  reorderLevel 
FROM 
  NORTHWINDCORE.PRODUCT 
WHERE 
  UNITSINSTOCK <= reorderLevel 
ORDER BY 
  UNITSINSTOCK;
-- Which employees have processed the most orders?
SELECT 
  CONCAT(E.FIRSTNAME, ' ', E.LASTNAME) AS EmployeeName, 
  EMPLOYEEID, 
  count(*) as processedOder 
from 
  NORTHWINDCORE.SALESORDER S 
  join NORTHWINDCORE.EMPLOYEE E on E.ENTITYID = S.EMPLOYEEID 
group by 
  EMPLOYEEID 
order by 
  processedOder desc 
limit 
  1;
-- What is the average number of orders handled per employee?
SELECT 
  COUNT(*) / COUNT(DISTINCT EMPLOYEEID) AS AvgOrdersPerEmployee 
FROM 
  NORTHWINDCORE.SALESORDER;
WITH EmployeeOrders AS (
  SELECT 
    EMPLOYEEID, 
    COUNT(*) AS OrderCount 
  FROM 
    NORTHWINDCORE.SALESORDER 
  GROUP BY 
    EMPLOYEEID
) 
SELECT 
  AVG(OrderCount) AS AvgOrdersPerEmployee 
FROM 
  EmployeeOrders;
-- Which employee has been with the company the longest (based on hire date)?
SELECT 
  *, 
  DATEDIFF(NOW(), HIREDATE) AS DaysSinceHired 
FROM 
  NORTHWINDCORE.EMPLOYEE;
SELECT 
  *, 
  ROUND(
    DATEDIFF(NOW(), HIREDATE) / 365, 
    0
  ) AS YearsSinceHired 
FROM 
  NORTHWINDCORE.EMPLOYEE 
order by 
  YearsSinceHired desc 
limit 
  1;
-- What is the distribution of employees by region or city?
select 
  CITY, 
  COUNT(*) as distributionOfEmployees 
from 
  NORTHWINDCORE.EMPLOYEE E 
group by 
  CITY;
-- Which employees have the same manager (Mgr ID)?
SELECT 
  MGRID, 
  GROUP_CONCAT(
    CONCAT(FIRSTNAME, ' ', LASTNAME) 
    ORDER BY 
      FIRSTNAME SEPARATOR ', '
  ) AS Employees 
FROM 
  NORTHWINDCORE.EMPLOYEE 
WHERE 
  MGRID IS NOT NULL 
GROUP BY 
  MGRID;
-- Which shipping company (Shipper) is used the most?
select 
  S2.COMPANYNAME, 
  count(*) as Shipper 
from 
  NORTHWINDCORE.SALESORDER S 
  join NORTHWINDCORE.SHIPPER S2 on S.SHIPPERID = S2.ENTITYID 
group by 
  S2.ENTITYID 
order by 
  Shipper desc 
limit 
  1;
-- What is the average shipping time from order date to required date?
select 
  ROUND(
    AVG(
      DATEDIFF(S.REQUIREDDATE, S.ORDERDATE)
    ), 
    0
  ) as average_shipping 
from 
  NORTHWINDCORE.SALESORDER S;
-- Which country receives the most shipments?
select 
  S.SHIPCOUNTRY, 
  count(*) as OrderCount 
from 
  NORTHWINDCORE.SALESORDER S 
group by 
  S.SHIPCOUNTRY 
order by 
  OrderCount desc 
limit 
  1;
-- Which regions have the most delayed shipments (shippedDate vs requiredDate)?
SELECT 
  S.SHIPREGION, 
  MAX(
    DATEDIFF(S.REQUIREDDATE, S.ORDERDATE)
  ) AS MaxDateDiff 
FROM 
  NORTHWINDCORE.SALESORDER S 
GROUP BY 
  S.SHIPREGION 
ORDER BY 
  MaxDateDiff desc 
limit 
  1;
-- What is the average freight cost per order? 
SELECT 
  ROUND(
    AVG(S.FREIGHT), 
    2
  ) as average_freight_cost 
from 
  NORTHWINDCORE.SALESORDER S;
-- Which supplier provides the highest number of products? 
select 
  s.COMPANYNAME, 
  COUNT(PRODUCTNAME) as PRODUCTCOUNT 
from 
  NORTHWINDCORE.PRODUCT P 
  join NORTHWINDCORE.SUPPLIER S on P.SUPPLIERID = S.ENTITYID 
GROUP by 
  S.ENTITYID 
order by 
  PRODUCTCOUNT desc 
limit 
  1;
SELECT 
  SUPPLIER_COUNT, 
  GROUP_CONCAT(
    COMPANYNAME 
    ORDER BY 
      COMPANYNAME SEPARATOR ', '
  ) AS SUPPLIERS 
FROM 
  (
    SELECT 
      S.COMPANYNAME, 
      COUNT(P.PRODUCTNAME) AS SUPPLIER_COUNT 
    FROM 
      NORTHWINDCORE.PRODUCT P 
      JOIN NORTHWINDCORE.SUPPLIER S ON P.SUPPLIERID = S.ENTITYID 
    GROUP BY 
      S.COMPANYNAME
  ) AS SupplierCounts 
GROUP BY 
  SUPPLIER_COUNT 
ORDER BY 
  SUPPLIER_COUNT DESC;
-- What is the total revenue generated by each supplierâ€™s products?
select 
  S.COMPANYNAME, 
  SUM(P.UNITPRICE * P.UNITSINSTOCK) as TOTAL_REVENUE 
from 
  NORTHWINDCORE.PRODUCT P 
  join NORTHWINDCORE.SUPPLIER S on P.SUPPLIERID = S.ENTITYID 
GROUP by 
  S.COMPANYNAME;
-- Which supplier has the most out-of-stock products?
SELECT 
  S.COMPANYNAME, 
  sum(P.UNITSINSTOCK) as out_of_stock 
FROM 
  NORTHWINDCORE.PRODUCT P 
  join NORTHWINDCORE.SUPPLIER S on S.ENTITYID = P.SUPPLIERID 
GROUP by 
  P.SUPPLIERID 
order by 
  out_of_stock asc 
limit 
  1;
SELECT 
  S.COMPANYNAME, 
  COUNT(*) AS OUT_OF_STOCK 
FROM 
  NORTHWINDCORE.PRODUCT P 
  JOIN NORTHWINDCORE.SUPPLIER S ON S.ENTITYID = P.SUPPLIERID 
WHERE 
  P.UNITSINSTOCK = 0 
GROUP BY 
  S.COMPANYNAME 
ORDER BY 
  OUT_OF_STOCK DESC 
LIMIT 
  1;
-- Which supplier operates in the most regions?
SELECT 
  S.REGION, 
  COUNT(DISTINCT S.ENTITYID) AS OUT_OF_STOCK 
FROM 
  NORTHWINDCORE.PRODUCT P 
  JOIN NORTHWINDCORE.SUPPLIER S ON S.ENTITYID = P.SUPPLIERID 
GROUP BY 
  S.REGION 
limit 
  1;
-- Which suppliers have the highest-reorder Level products ?
SELECT 
  S.COMPANYNAME, 
  sum(P.REORDERLEVEL) as reorder_Level 
from 
  NORTHWINDCORE.PRODUCT P 
  join NORTHWINDCORE.SUPPLIER S ON S.ENTITYID = P.SUPPLIERID 
GROUP by 
  S.COMPANYNAME 
order by 
  reorder_Level desc 
limit 
  1;
-- Which month has the highest number of orders?
SELECT 
  MONTH(S.ORDERDATE) AS orderMonth, 
  MAX(
    DATE_FORMAT(S.ORDERDATE, '%M')
  ) AS monthName, 
  SUM(O.QUANTITY) AS totalQuantity 
FROM 
  NORTHWINDCORE.SALESORDER S 
  JOIN NORTHWINDCORE.ORDERDETAIL O ON O.ORDERID = S.ENTITYID 
GROUP BY 
  orderMonth 
ORDER BY 
  totalQuantity desc 
limit 
  1;
-- What is the average order value per customer?
select 
  C.ENTITYID, 
  C.CONTACTNAME, 
  round(
    Avg(
      O.UNITPRICE * O.QUANTITY * (1 - O.DISCOUNT)
    ), 
    2
  ) as OrderValue 
from 
  NORTHWINDCORE.SALESORDER S 
  join NORTHWINDCORE.CUSTOMER C on S.CUSTOMERID = C.ENTITYID 
  join NORTHWINDCORE.ORDERDETAIL O on O.ORDERID = S.ENTITYID 
group by 
  C.ENTITYID 
order by 
  OrderValue desc;
-- How many orders are placed in each region?
select 
  S.SHIPREGION, 
  count(*) 
from 
  NORTHWINDCORE.SALESORDER S 
GROUP by 
  S.SHIPREGION;
-- What is the most frequently ordered product?
select 
  P.PRODUCTNAME, 
  Count(O.ORDERID) as OderCount 
from 
  NORTHWINDCORE.ORDERDETAIL O 
  join NORTHWINDCORE.PRODUCT P on O.PRODUCTID = P.ENTITYID 
group by 
  P.ENTITYID 
order by 
  ODERCOUNT desc 
limit 
  1;
-- Which orders had the highest discounts applied?
select 
  O.ORDERID, 
  Max(O.DISCOUNT) as highest_discounts 
from 
  NORTHWINDCORE.ORDERDETAIL O 
GROUP BY 
  O.ENTITYID 
order by 
  highest_discounts desc;
select 
  Max(O.ORDERID) 
from 
  NORTHWINDCORE.ORDERDETAIL O;
select 
  Max(s.ENTITYID) 
from 
  NORTHWINDCORE.SALESORDER S;
-- What are the most common shipping regions?
select 
  C.REGION, 
  count(*) 
from 
  NORTHWINDCORE.CUSTOMER C 
group by 
  C.REGION 
order by 
  count(*) desc;
-- Which products are out of stock?
SELECT 
  P.PRODUCTNAME 
FROM 
  NORTHWINDCORE.PRODUCT P 
WHERE 
  P.UNITSINSTOCK = 0 
UNION 
SELECT 
  'No product is out of stock' 
WHERE 
  NOT EXISTS (
    SELECT 
      1 
    FROM 
      NORTHWINDCORE.PRODUCT 
    WHERE 
      UNITSINSTOCK = 0
  );
------------------------------------------------------------------------------------
SELECT 
  CASE WHEN COUNT(*) = 0 THEN 'No product is out of stock' ELSE GROUP_CONCAT(PRODUCTNAME) END AS Result 
FROM 
  NORTHWINDCORE.PRODUCT 
WHERE 
  UNITSINSTOCK = 0;
-- What is the average quantity per unit for each category?
SELECT 
  C.CATEGORYNAME, 
  AVG(
    CAST(
      SUBSTRING_INDEX(P.QUANTITYPERUNIT, ' ', 1) AS UNSIGNED
    )
  ) AS AVG_QUANTITY_PER_UNIT 
FROM 
  NORTHWINDCORE.CATEGORY C 
  JOIN NORTHWINDCORE.PRODUCT P ON C.ENTITYID = P.CATEGORYID 
WHERE 
  P.QUANTITYPERUNIT IS NOT NULL 
GROUP BY 
  C.CATEGORYNAME;
-- Which products have the highest unit price?
select 
  * 
from 
  NORTHWINDCORE.PRODUCT P 
where 
  P.UNITPRICE = (
    select 
      max(X.UNITPRICE) 
    from 
      NORTHWINDCORE.PRODUCT X
  );
-- Which regions have the highest demand for stock replenishment?
SELECT 
  S.REGION, 
  SUM(P.UNITSINSTOCK) AS TOTAL_UNITS_IN_STOCK, 
  SUM(P.UNITSONORDER) AS TOTAL_UNITS_ON_ORDER, 
  (
    SUM(P.UNITSONORDER) - SUM(P.UNITSINSTOCK)
  ) AS STOCK_DEMAND 
FROM 
  NORTHWINDCORE.PRODUCT P 
  JOIN NORTHWINDCORE.SUPPLIER S ON P.SUPPLIERID = S.ENTITYID 
GROUP BY 
  S.REGION 
ORDER BY 
  STOCK_DEMAND DESC;
-- Which product categories are running low on inventory?
select 
  C.CATEGORYNAME, 
  sum(P.UNITSINSTOCK) lowinventory 
from 
  NORTHWINDCORE.PRODUCT P 
  join NORTHWINDCORE.CATEGORY C on P.CATEGORYID = C.ENTITYID 
group by 
  C.CATEGORYNAME 
order by 
  lowinventory;
-- What is the distribution of customers by country? 
select 
  C.COUNTRY, 
  count(*) distribution 
from 
  NORTHWINDCORE.CUSTOMER C 
group by 
  C.COUNTRY 
order by 
  distribution desc;
-- What is the average number of orders per customer?
SELECT 
  AVG(ORDER_COUNT) AS AVG_ORDERS_PER_CUSTOMER 
FROM 
  (
    SELECT 
      C.ENTITYID, 
      COUNT(S.ENTITYID) AS ORDER_COUNT 
    FROM 
      NORTHWINDCORE.SALESORDER S 
      JOIN NORTHWINDCORE.CUSTOMER C ON C.ENTITYID = S.CUSTOMERID 
    GROUP BY 
      C.ENTITYID
  ) AS CUSTOMER_ORDERS;
-- Which customers place repeat orders the most? 
select 
  C.COMPANYNAME, 
  count(S.ENTITYID) as ORDER_COUNT 
from 
  NORTHWINDCORE.SALESORDER S 
  join NORTHWINDCORE.CUSTOMER C on S.CUSTOMERID = C.ENTITYID 
group by 
  C.ENTITYID 
HAVING 
  ORDER_COUNT > 1 
ORDER BY 
  ORDER_COUNT DESC;
-- What percentage of customers use mobile contact instead of landline?
SELECT 
  ROUND(
    (
      COUNT(
        CASE WHEN MOBILE IS NOT NULL 
        AND (
          PHONE IS NULL 
          OR PHONE = ''
        ) THEN 1 END
      ) / COUNT(*)
    ) * 100, 
    2
  ) AS PERCENTAGE_MOBILE_ONLY 
FROM 
  NORTHWINDCORE.CUSTOMER;
-- What is the most frequently ordered product category?
SELECT 
  C.CATEGORYNAME, 
  SUM(O.QUANTITY) AS TOTAL_QUANTITY_ORDERED 
FROM 
  NORTHWINDCORE.ORDERDETAIL O 
  JOIN NORTHWINDCORE.PRODUCT P ON O.PRODUCTID = P.ENTITYID 
  JOIN NORTHWINDCORE.CATEGORY C ON C.ENTITYID = P.CATEGORYID 
GROUP BY 
  C.CATEGORYNAME 
ORDER BY 
  TOTAL_QUANTITY_ORDERED DESC 
limit 
  1;
-- Which region generates the most revenue ?
SELECT 
  S.SHIPREGION, 
  SUM(
    O.UNITPRICE * O.QUANTITY * (1 - O.DISCOUNT)
  ) AS TOTAL_REVENUE 
FROM 
  NORTHWINDCORE.SALESORDER S 
  JOIN NORTHWINDCORE.ORDERDETAIL O ON S.ENTITYID = O.ORDERID 
GROUP BY 
  S.SHIPREGION 
ORDER BY 
  TOTAL_REVENUE DESC 
LIMIT 
  1;
-- What is the total sales revenue per year?
SELECT 
  Year(S.ORDERDATE) as Year_AS, 
  round(
    SUM(
      O.UNITPRICE * O.QUANTITY * (1 - O.DISCOUNT)
    ), 
    2
  ) AS TOTAL_REVENUE 
FROM 
  NORTHWINDCORE.SALESORDER S 
  JOIN NORTHWINDCORE.ORDERDETAIL O ON S.ENTITYID = O.ORDERID 
GROUP BY 
  Year(S.ORDERDATE) 
ORDER BY 
  TOTAL_REVENUE DESC;
-- What is the growth trend in order volume over the years?
SELECT 
  YEAR(S.ORDERDATE) AS YEAR_AS, 
  COUNT(S.ENTITYID) AS TOTAL_ORDERS, 
  LAG(
    COUNT(S.ENTITYID), 
    1
  ) OVER (
    ORDER BY 
      YEAR(S.ORDERDATE)
  ) AS PREVIOUS_YEAR_ORDERS, 
  ROUND(
    (
      (
        COUNT(S.ENTITYID) - LAG(
          COUNT(S.ENTITYID), 
          1
        ) OVER (
          ORDER BY 
            YEAR(S.ORDERDATE)
        )
      ) / NULLIF(
        LAG(
          COUNT(S.ENTITYID), 
          1
        ) OVER (
          ORDER BY 
            YEAR(S.ORDERDATE)
        ), 
        0
      )
    ) * 100, 
    2
  ) AS GROWTH_PERCENTAGE 
FROM 
  NORTHWINDCORE.SALESORDER S 
GROUP BY 
  YEAR(S.ORDERDATE) 
ORDER BY 
  YEAR_AS;
